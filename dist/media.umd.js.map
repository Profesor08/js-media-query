{"version":3,"file":"media.umd.js","sources":["../src/Media/Media.ts","../src/media/Media.ts"],"sourcesContent":["interface IBreapoints {\r\n  xs: number;\r\n  sm: number;\r\n  md: number;\r\n  lg: number;\r\n  xl: number;\r\n}\r\n\r\ntype MediaEventType = \"in\" | \"out\" | \"changed\";\r\ntype MediaCallback = () => void;\r\ntype MediaEventAction = () => boolean;\r\n\r\ninterface MediaEvent {\r\n  media: () => boolean;\r\n  callback: () => void;\r\n  value: boolean;\r\n}\r\n\r\ntype IGlobalEvents = {\r\n  [key in MediaEventType]: MediaEvent[];\r\n};\r\n\r\nconst defaultBreakpoints: IBreapoints = {\r\n  xs: 0,\r\n  sm: 576,\r\n  md: 768,\r\n  lg: 992,\r\n  xl: 1200,\r\n};\r\n\r\nexport class Media {\r\n  private breakpoints: IBreapoints = defaultBreakpoints;\r\n\r\n  private events: IGlobalEvents = {\r\n    in: [],\r\n    out: [],\r\n    changed: [],\r\n  };\r\n\r\n  /**\r\n   * Media object constructor\r\n   */\r\n  constructor(breakpoints: IBreapoints = defaultBreakpoints) {\r\n    this.setBreakpoints(breakpoints);\r\n  }\r\n\r\n  /**\r\n   * Set Local breapoints\r\n   */\r\n  setBreakpoints(breakpoints: IBreapoints) {\r\n    this.breakpoints = {\r\n      xs: breakpoints.xs,\r\n      sm: breakpoints.sm,\r\n      md: breakpoints.md,\r\n      lg: breakpoints.lg,\r\n      xl: breakpoints.xl,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Match Media query\r\n   */\r\n  private media = (mediaQueryString: string): boolean => {\r\n    return window.matchMedia(mediaQueryString).matches;\r\n  };\r\n\r\n  /**\r\n   * Check media query\r\n   */\r\n  public query = (mediaQuery: string): boolean => {\r\n    return this.media(mediaQuery);\r\n  };\r\n\r\n  /**\r\n   * Minimum breakpoint width\r\n   */\r\n  public min = (breakpoint: number) => {\r\n    return this.query(`(min-width: ${breakpoint}px)`);\r\n  };\r\n\r\n  /**\r\n   * Maximum breakpoint width\r\n   */\r\n  public max = (breakpoint: number) => {\r\n    return this.query(`(max-width: ${breakpoint}px)`);\r\n  };\r\n\r\n  /**\r\n   * Minimum breakpoint width\r\n   */\r\n  public up = (breakpoint: number): boolean => {\r\n    return this.min(breakpoint);\r\n  };\r\n\r\n  /**\r\n   * Maximum breakpoint width\r\n   */\r\n  public down = (breakpoint: number): boolean => {\r\n    return this.max(breakpoint);\r\n  };\r\n\r\n  /**\r\n   * Check if screen between the from and to breakpoints\r\n   */\r\n  public between = (from: number, to: number): boolean => {\r\n    return this.query(`(min-width: ${from}px) and (max-width: ${to}px)`);\r\n  };\r\n\r\n  /**\r\n   * Check if is touck device\r\n   */\r\n  public isTouch = () => {\r\n    return this.query(`(pointer: coarse)`);\r\n  };\r\n\r\n  /**\r\n   * Check if is non-touch device\r\n   */\r\n  public isMouse = () => {\r\n    return this.query(`(pointer: fine)`);\r\n  };\r\n\r\n  /**\r\n   * Check if screen is bigger or equal to xs breapoint\r\n   */\r\n  public xs = () => {\r\n    return this.up(this.breakpoints.xs);\r\n  };\r\n\r\n  /**\r\n   * Check if screen is bigger or equal to sm breapoint\r\n   */\r\n  public sm = () => {\r\n    return this.up(this.breakpoints.sm);\r\n  };\r\n\r\n  /**\r\n   * Check if screen is bigger or equal to md breapoint\r\n   */\r\n  public md = () => {\r\n    return this.up(this.breakpoints.md);\r\n  };\r\n\r\n  /**\r\n   * Check if screen is bigger or equal to lg breapoint\r\n   */\r\n  public lg = () => {\r\n    return this.up(this.breakpoints.lg);\r\n  };\r\n\r\n  /**\r\n   * Check if screen is bigger or equal to xl breapoint\r\n   */\r\n  public xl = () => {\r\n    return this.up(this.breakpoints.xl);\r\n  };\r\n\r\n  /**\r\n   *\r\n   * @param {string} event Event name ex: \"activated\" | \"deactivated\" | \"changed\"\r\n   * @param {function} callback Function what will be executed if event is triggered\r\n   * @param {function} media Function what returns media query result: true/false\r\n   */\r\n  public on = (\r\n    event: MediaEventType,\r\n    callback: () => void,\r\n    media: () => boolean,\r\n  ) => {\r\n    if (callback instanceof Function) {\r\n      this.events[event].push({\r\n        media,\r\n        callback,\r\n        value: media(),\r\n      });\r\n    }\r\n\r\n    this.initEvents();\r\n  };\r\n\r\n  public off = (\r\n    ...args: [MediaEventType, MediaCallback?, MediaEventAction?]\r\n  ): void => {\r\n    const [event, callback, media] = args;\r\n\r\n    if (callback === undefined) {\r\n      this.events[event] = [];\r\n    } else if (media === undefined) {\r\n      this.events[event] = this.events[event].filter(\r\n        mediaEvent => !(mediaEvent.callback === callback),\r\n      );\r\n    } else {\r\n      this.events[event] = this.events[event].filter(\r\n        mediaEvent =>\r\n          !(mediaEvent.callback === callback && mediaEvent.media === media),\r\n      );\r\n    }\r\n\r\n    this.initEvents();\r\n  };\r\n\r\n  private resize = () => {\r\n    for (const eventType in this.events) {\r\n      const events: MediaEvent[] = this.events[eventType];\r\n      for (const event of events) {\r\n        const value = event.media();\r\n\r\n        if (event.value !== value) {\r\n          if (eventType === \"changed\") {\r\n            event.callback();\r\n          } else if (eventType === \"in\") {\r\n            if (value === true) {\r\n              event.callback();\r\n            }\r\n          } else if (eventType === \"out\") {\r\n            if (value === false) {\r\n              event.callback();\r\n            }\r\n          }\r\n\r\n          event.value = value;\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  private initEvents = () => {\r\n    for (const eventType in this.events) {\r\n      if (this.events[eventType].length) {\r\n        window.addEventListener(\"resize\", () => {\r\n          this.resize();\r\n        });\r\n        return;\r\n      }\r\n    }\r\n\r\n    window.removeEventListener(\"resize\", this.resize);\r\n  };\r\n}\r\n\r\nconst media = new Media();\r\n\r\nconst query = media.query;\r\nconst min = media.min;\r\nconst max = media.max;\r\nconst up = media.up;\r\nconst down = media.down;\r\nconst between = media.between;\r\nconst isTouch = media.isTouch;\r\nconst isMouse = media.isMouse;\r\nconst xs = media.xs;\r\nconst sm = media.sm;\r\nconst md = media.md;\r\nconst lg = media.lg;\r\nconst xl = media.xl;\r\nconst setBreakpoints = media.setBreakpoints;\r\n\r\nexport {\r\n  query,\r\n  min,\r\n  max,\r\n  up,\r\n  down,\r\n  between,\r\n  isTouch,\r\n  isMouse,\r\n  xs,\r\n  sm,\r\n  md,\r\n  lg,\r\n  xl,\r\n  setBreakpoints,\r\n};\r\n\r\nexport default media;\r\n","interface IBreapoints {\r\n  xs: number;\r\n  sm: number;\r\n  md: number;\r\n  lg: number;\r\n  xl: number;\r\n}\r\n\r\ntype MediaEventType = \"in\" | \"out\" | \"changed\";\r\ntype MediaCallback = () => void;\r\ntype MediaEventAction = () => boolean;\r\n\r\ninterface MediaEvent {\r\n  media: () => boolean;\r\n  callback: () => void;\r\n  value: boolean;\r\n}\r\n\r\ntype IGlobalEvents = {\r\n  [key in MediaEventType]: MediaEvent[];\r\n};\r\n\r\nconst defaultBreakpoints: IBreapoints = {\r\n  xs: 0,\r\n  sm: 576,\r\n  md: 768,\r\n  lg: 992,\r\n  xl: 1200,\r\n};\r\n\r\nexport class Media {\r\n  private breakpoints: IBreapoints = defaultBreakpoints;\r\n\r\n  private events: IGlobalEvents = {\r\n    in: [],\r\n    out: [],\r\n    changed: [],\r\n  };\r\n\r\n  /**\r\n   * Media object constructor\r\n   */\r\n  constructor(breakpoints: IBreapoints = defaultBreakpoints) {\r\n    this.setBreakpoints(breakpoints);\r\n  }\r\n\r\n  /**\r\n   * Set Local breapoints\r\n   */\r\n  setBreakpoints(breakpoints: IBreapoints) {\r\n    this.breakpoints = {\r\n      xs: breakpoints.xs,\r\n      sm: breakpoints.sm,\r\n      md: breakpoints.md,\r\n      lg: breakpoints.lg,\r\n      xl: breakpoints.xl,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Match Media query\r\n   */\r\n  private media = (mediaQueryString: string): boolean => {\r\n    return window.matchMedia(mediaQueryString).matches;\r\n  };\r\n\r\n  /**\r\n   * Check media query\r\n   */\r\n  public query = (mediaQuery: string): boolean => {\r\n    return this.media(mediaQuery);\r\n  };\r\n\r\n  /**\r\n   * Minimum breakpoint width\r\n   */\r\n  public min = (breakpoint: number) => {\r\n    return this.query(`(min-width: ${breakpoint}px)`);\r\n  };\r\n\r\n  /**\r\n   * Maximum breakpoint width\r\n   */\r\n  public max = (breakpoint: number) => {\r\n    return this.query(`(max-width: ${breakpoint}px)`);\r\n  };\r\n\r\n  /**\r\n   * Minimum breakpoint width\r\n   */\r\n  public up = (breakpoint: number): boolean => {\r\n    return this.min(breakpoint);\r\n  };\r\n\r\n  /**\r\n   * Maximum breakpoint width\r\n   */\r\n  public down = (breakpoint: number): boolean => {\r\n    return this.max(breakpoint);\r\n  };\r\n\r\n  /**\r\n   * Check if screen between the from and to breakpoints\r\n   */\r\n  public between = (from: number, to: number): boolean => {\r\n    return this.query(`(min-width: ${from}px) and (max-width: ${to}px)`);\r\n  };\r\n\r\n  /**\r\n   * Check if is touck device\r\n   */\r\n  public isTouch = () => {\r\n    return this.query(`(pointer: coarse)`);\r\n  };\r\n\r\n  /**\r\n   * Check if is non-touch device\r\n   */\r\n  public isMouse = () => {\r\n    return this.query(`(pointer: fine)`);\r\n  };\r\n\r\n  /**\r\n   * Check if screen is bigger or equal to xs breapoint\r\n   */\r\n  public xs = () => {\r\n    return this.up(this.breakpoints.xs);\r\n  };\r\n\r\n  /**\r\n   * Check if screen is bigger or equal to sm breapoint\r\n   */\r\n  public sm = () => {\r\n    return this.up(this.breakpoints.sm);\r\n  };\r\n\r\n  /**\r\n   * Check if screen is bigger or equal to md breapoint\r\n   */\r\n  public md = () => {\r\n    return this.up(this.breakpoints.md);\r\n  };\r\n\r\n  /**\r\n   * Check if screen is bigger or equal to lg breapoint\r\n   */\r\n  public lg = () => {\r\n    return this.up(this.breakpoints.lg);\r\n  };\r\n\r\n  /**\r\n   * Check if screen is bigger or equal to xl breapoint\r\n   */\r\n  public xl = () => {\r\n    return this.up(this.breakpoints.xl);\r\n  };\r\n\r\n  /**\r\n   *\r\n   * @param {string} event Event name ex: \"activated\" | \"deactivated\" | \"changed\"\r\n   * @param {function} callback Function what will be executed if event is triggered\r\n   * @param {function} media Function what returns media query result: true/false\r\n   */\r\n  public on = (\r\n    event: MediaEventType,\r\n    callback: () => void,\r\n    media: () => boolean,\r\n  ) => {\r\n    if (callback instanceof Function) {\r\n      this.events[event].push({\r\n        media,\r\n        callback,\r\n        value: media(),\r\n      });\r\n    }\r\n\r\n    this.initEvents();\r\n  };\r\n\r\n  public off = (\r\n    ...args: [MediaEventType, MediaCallback?, MediaEventAction?]\r\n  ): void => {\r\n    const [event, callback, media] = args;\r\n\r\n    if (callback === undefined) {\r\n      this.events[event] = [];\r\n    } else if (media === undefined) {\r\n      this.events[event] = this.events[event].filter(\r\n        mediaEvent => !(mediaEvent.callback === callback),\r\n      );\r\n    } else {\r\n      this.events[event] = this.events[event].filter(\r\n        mediaEvent =>\r\n          !(mediaEvent.callback === callback && mediaEvent.media === media),\r\n      );\r\n    }\r\n\r\n    this.initEvents();\r\n  };\r\n\r\n  private resize = () => {\r\n    for (const eventType in this.events) {\r\n      const events: MediaEvent[] = this.events[eventType];\r\n      for (const event of events) {\r\n        const value = event.media();\r\n\r\n        if (event.value !== value) {\r\n          if (eventType === \"changed\") {\r\n            event.callback();\r\n          } else if (eventType === \"in\") {\r\n            if (value === true) {\r\n              event.callback();\r\n            }\r\n          } else if (eventType === \"out\") {\r\n            if (value === false) {\r\n              event.callback();\r\n            }\r\n          }\r\n\r\n          event.value = value;\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  private initEvents = () => {\r\n    for (const eventType in this.events) {\r\n      if (this.events[eventType].length) {\r\n        window.addEventListener(\"resize\", () => {\r\n          this.resize();\r\n        });\r\n        return;\r\n      }\r\n    }\r\n\r\n    window.removeEventListener(\"resize\", this.resize);\r\n  };\r\n}\r\n\r\nconst media = new Media();\r\n\r\nconst query = media.query;\r\nconst min = media.min;\r\nconst max = media.max;\r\nconst up = media.up;\r\nconst down = media.down;\r\nconst between = media.between;\r\nconst isTouch = media.isTouch;\r\nconst isMouse = media.isMouse;\r\nconst xs = media.xs;\r\nconst sm = media.sm;\r\nconst md = media.md;\r\nconst lg = media.lg;\r\nconst xl = media.xl;\r\nconst setBreakpoints = media.setBreakpoints;\r\n\r\nexport {\r\n  query,\r\n  min,\r\n  max,\r\n  up,\r\n  down,\r\n  between,\r\n  isTouch,\r\n  isMouse,\r\n  xs,\r\n  sm,\r\n  md,\r\n  lg,\r\n  xl,\r\n  setBreakpoints,\r\n};\r\n\r\nexport default media;\r\n"],"names":["const","defaultBreakpoints","xs","sm","md","lg","xl","Media","constructor","breakpoints","mediaQueryString","window","matchMedia","matches","mediaQuery","this","media","breakpoint","query","min","max","from","to","up","event","callback","Function","events","push","initEvents","undefined","filter","mediaEvent","eventType","value","length","addEventListener","resize","removeEventListener","setBreakpoints","down","between","isTouch","isMouse"],"mappings":"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"}