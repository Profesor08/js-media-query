{"version":3,"file":"media.umd.js","sources":["../src/Media/Media.ts","../src/media/Media.ts"],"sourcesContent":["interface IBreapoints {\r\n  xs: number;\r\n  sm: number;\r\n  md: number;\r\n  lg: number;\r\n  xl: number;\r\n}\r\n\r\ntype MediaEventType = \"in\" | \"out\" | \"changed\";\r\ntype MediaCallback = () => void;\r\ntype MediaEventAction = () => boolean;\r\n\r\ninterface MediaEvent {\r\n  media: () => boolean;\r\n  callback: () => void;\r\n  value: boolean;\r\n}\r\n\r\ntype IGlobalEvents = {\r\n  [key in MediaEventType]: MediaEvent[];\r\n};\r\n\r\nconst defaultBreakpoints: IBreapoints = {\r\n  xs: 0,\r\n  sm: 576,\r\n  md: 768,\r\n  lg: 992,\r\n  xl: 1200,\r\n};\r\n\r\nexport class JsMediaQuery {\r\n  private breakpoints: IBreapoints = defaultBreakpoints;\r\n\r\n  private events: IGlobalEvents = {\r\n    in: [],\r\n    out: [],\r\n    changed: [],\r\n  };\r\n\r\n  /**\r\n   * Media object constructor\r\n   */\r\n  constructor(breakpoints: IBreapoints = defaultBreakpoints) {\r\n    this.setBreakpoints(breakpoints);\r\n  }\r\n\r\n  /**\r\n   * Set Local breapoints\r\n   */\r\n  setBreakpoints(breakpoints: IBreapoints) {\r\n    this.breakpoints = {\r\n      xs: breakpoints.xs,\r\n      sm: breakpoints.sm,\r\n      md: breakpoints.md,\r\n      lg: breakpoints.lg,\r\n      xl: breakpoints.xl,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Match Media query\r\n   */\r\n  private media = (mediaQueryString: string): boolean => {\r\n    return window.matchMedia(mediaQueryString).matches;\r\n  };\r\n\r\n  /**\r\n   * Check media query\r\n   */\r\n  public query = (mediaQuery: string): boolean => {\r\n    return this.media(mediaQuery);\r\n  };\r\n\r\n  /**\r\n   * Minimum breakpoint width\r\n   */\r\n  public min = (breakpoint: number) => {\r\n    return this.query(`(min-width: ${breakpoint}px)`);\r\n  };\r\n\r\n  /**\r\n   * Maximum breakpoint width\r\n   */\r\n  public max = (breakpoint: number) => {\r\n    return this.query(`(max-width: ${breakpoint}px)`);\r\n  };\r\n\r\n  /**\r\n   * Minimum breakpoint width\r\n   */\r\n  public up = (breakpoint: number): boolean => {\r\n    return this.min(breakpoint);\r\n  };\r\n\r\n  /**\r\n   * Maximum breakpoint width\r\n   */\r\n  public down = (breakpoint: number): boolean => {\r\n    return this.max(breakpoint);\r\n  };\r\n\r\n  /**\r\n   * Check if screen between the from and to breakpoints\r\n   */\r\n  public between = (from: number, to: number): boolean => {\r\n    return this.query(`(min-width: ${from}px) and (max-width: ${to}px)`);\r\n  };\r\n\r\n  /**\r\n   * Check if is touck device\r\n   */\r\n  public isTouch = () => {\r\n    return this.query(`(pointer: coarse)`);\r\n  };\r\n\r\n  /**\r\n   * Check if is non-touch device\r\n   */\r\n  public isMouse = () => {\r\n    return this.query(`(pointer: fine)`);\r\n  };\r\n\r\n  /**\r\n   * Check if screen is bigger or equal to xs breapoint\r\n   */\r\n  public xs = () => {\r\n    return this.up(this.breakpoints.xs);\r\n  };\r\n\r\n  /**\r\n   * Check if screen is bigger or equal to sm breapoint\r\n   */\r\n  public sm = () => {\r\n    return this.up(this.breakpoints.sm);\r\n  };\r\n\r\n  /**\r\n   * Check if screen is bigger or equal to md breapoint\r\n   */\r\n  public md = () => {\r\n    return this.up(this.breakpoints.md);\r\n  };\r\n\r\n  /**\r\n   * Check if screen is bigger or equal to lg breapoint\r\n   */\r\n  public lg = () => {\r\n    return this.up(this.breakpoints.lg);\r\n  };\r\n\r\n  /**\r\n   * Check if screen is bigger or equal to xl breapoint\r\n   */\r\n  public xl = () => {\r\n    return this.up(this.breakpoints.xl);\r\n  };\r\n\r\n  /**\r\n   *\r\n   * @param {string} event Event name ex: \"activated\" | \"deactivated\" | \"changed\"\r\n   * @param {function} callback Function what will be executed if event is triggered\r\n   * @param {function} media Function what returns media query result: true/false\r\n   */\r\n  public on = (\r\n    event: MediaEventType,\r\n    callback: () => void,\r\n    media: () => boolean,\r\n  ) => {\r\n    if (callback instanceof Function) {\r\n      this.events[event].push({\r\n        media,\r\n        callback,\r\n        value: media(),\r\n      });\r\n    }\r\n\r\n    this.initEvents();\r\n  };\r\n\r\n  public off = (\r\n    ...args: [MediaEventType, MediaCallback?, MediaEventAction?]\r\n  ): void => {\r\n    const [event, callback, media] = args;\r\n\r\n    if (callback === undefined) {\r\n      this.events[event] = [];\r\n    } else if (media === undefined) {\r\n      this.events[event] = this.events[event].filter(\r\n        (mediaEvent) => !(mediaEvent.callback === callback),\r\n      );\r\n    } else {\r\n      this.events[event] = this.events[event].filter(\r\n        (mediaEvent) =>\r\n          !(mediaEvent.callback === callback && mediaEvent.media === media),\r\n      );\r\n    }\r\n\r\n    this.initEvents();\r\n  };\r\n\r\n  private resize = () => {\r\n    for (const eventType in this.events) {\r\n      const events: MediaEvent[] = this.events[eventType as MediaEventType];\r\n      for (const event of events) {\r\n        const value = event.media();\r\n\r\n        if (event.value !== value) {\r\n          if (eventType === \"changed\") {\r\n            event.callback();\r\n          } else if (eventType === \"in\") {\r\n            if (value === true) {\r\n              event.callback();\r\n            }\r\n          } else if (eventType === \"out\") {\r\n            if (value === false) {\r\n              event.callback();\r\n            }\r\n          }\r\n\r\n          event.value = value;\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  private initEvents = () => {\r\n    for (const eventType in this.events) {\r\n      if (this.events[eventType as MediaEventType].length) {\r\n        window.addEventListener(\"resize\", () => {\r\n          this.resize();\r\n        });\r\n        return;\r\n      }\r\n    }\r\n\r\n    window.removeEventListener(\"resize\", this.resize);\r\n  };\r\n}\r\n\r\nconst media = new JsMediaQuery();\r\n\r\nexport const Media = media;\r\nexport const query = media.query;\r\nexport const min = media.min;\r\nexport const max = media.max;\r\nexport const up = media.up;\r\nexport const down = media.down;\r\nexport const between = media.between;\r\nexport const isTouch = media.isTouch;\r\nexport const isMouse = media.isMouse;\r\nexport const xs = media.xs;\r\nexport const sm = media.sm;\r\nexport const md = media.md;\r\nexport const lg = media.lg;\r\nexport const xl = media.xl;\r\nexport const setBreakpoints = media.setBreakpoints;\r\n\r\nexport default media;\r\n","interface IBreapoints {\r\n  xs: number;\r\n  sm: number;\r\n  md: number;\r\n  lg: number;\r\n  xl: number;\r\n}\r\n\r\ntype MediaEventType = \"in\" | \"out\" | \"changed\";\r\ntype MediaCallback = () => void;\r\ntype MediaEventAction = () => boolean;\r\n\r\ninterface MediaEvent {\r\n  media: () => boolean;\r\n  callback: () => void;\r\n  value: boolean;\r\n}\r\n\r\ntype IGlobalEvents = {\r\n  [key in MediaEventType]: MediaEvent[];\r\n};\r\n\r\nconst defaultBreakpoints: IBreapoints = {\r\n  xs: 0,\r\n  sm: 576,\r\n  md: 768,\r\n  lg: 992,\r\n  xl: 1200,\r\n};\r\n\r\nexport class JsMediaQuery {\r\n  private breakpoints: IBreapoints = defaultBreakpoints;\r\n\r\n  private events: IGlobalEvents = {\r\n    in: [],\r\n    out: [],\r\n    changed: [],\r\n  };\r\n\r\n  /**\r\n   * Media object constructor\r\n   */\r\n  constructor(breakpoints: IBreapoints = defaultBreakpoints) {\r\n    this.setBreakpoints(breakpoints);\r\n  }\r\n\r\n  /**\r\n   * Set Local breapoints\r\n   */\r\n  setBreakpoints(breakpoints: IBreapoints) {\r\n    this.breakpoints = {\r\n      xs: breakpoints.xs,\r\n      sm: breakpoints.sm,\r\n      md: breakpoints.md,\r\n      lg: breakpoints.lg,\r\n      xl: breakpoints.xl,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Match Media query\r\n   */\r\n  private media = (mediaQueryString: string): boolean => {\r\n    return window.matchMedia(mediaQueryString).matches;\r\n  };\r\n\r\n  /**\r\n   * Check media query\r\n   */\r\n  public query = (mediaQuery: string): boolean => {\r\n    return this.media(mediaQuery);\r\n  };\r\n\r\n  /**\r\n   * Minimum breakpoint width\r\n   */\r\n  public min = (breakpoint: number) => {\r\n    return this.query(`(min-width: ${breakpoint}px)`);\r\n  };\r\n\r\n  /**\r\n   * Maximum breakpoint width\r\n   */\r\n  public max = (breakpoint: number) => {\r\n    return this.query(`(max-width: ${breakpoint}px)`);\r\n  };\r\n\r\n  /**\r\n   * Minimum breakpoint width\r\n   */\r\n  public up = (breakpoint: number): boolean => {\r\n    return this.min(breakpoint);\r\n  };\r\n\r\n  /**\r\n   * Maximum breakpoint width\r\n   */\r\n  public down = (breakpoint: number): boolean => {\r\n    return this.max(breakpoint);\r\n  };\r\n\r\n  /**\r\n   * Check if screen between the from and to breakpoints\r\n   */\r\n  public between = (from: number, to: number): boolean => {\r\n    return this.query(`(min-width: ${from}px) and (max-width: ${to}px)`);\r\n  };\r\n\r\n  /**\r\n   * Check if is touck device\r\n   */\r\n  public isTouch = () => {\r\n    return this.query(`(pointer: coarse)`);\r\n  };\r\n\r\n  /**\r\n   * Check if is non-touch device\r\n   */\r\n  public isMouse = () => {\r\n    return this.query(`(pointer: fine)`);\r\n  };\r\n\r\n  /**\r\n   * Check if screen is bigger or equal to xs breapoint\r\n   */\r\n  public xs = () => {\r\n    return this.up(this.breakpoints.xs);\r\n  };\r\n\r\n  /**\r\n   * Check if screen is bigger or equal to sm breapoint\r\n   */\r\n  public sm = () => {\r\n    return this.up(this.breakpoints.sm);\r\n  };\r\n\r\n  /**\r\n   * Check if screen is bigger or equal to md breapoint\r\n   */\r\n  public md = () => {\r\n    return this.up(this.breakpoints.md);\r\n  };\r\n\r\n  /**\r\n   * Check if screen is bigger or equal to lg breapoint\r\n   */\r\n  public lg = () => {\r\n    return this.up(this.breakpoints.lg);\r\n  };\r\n\r\n  /**\r\n   * Check if screen is bigger or equal to xl breapoint\r\n   */\r\n  public xl = () => {\r\n    return this.up(this.breakpoints.xl);\r\n  };\r\n\r\n  /**\r\n   *\r\n   * @param {string} event Event name ex: \"activated\" | \"deactivated\" | \"changed\"\r\n   * @param {function} callback Function what will be executed if event is triggered\r\n   * @param {function} media Function what returns media query result: true/false\r\n   */\r\n  public on = (\r\n    event: MediaEventType,\r\n    callback: () => void,\r\n    media: () => boolean,\r\n  ) => {\r\n    if (callback instanceof Function) {\r\n      this.events[event].push({\r\n        media,\r\n        callback,\r\n        value: media(),\r\n      });\r\n    }\r\n\r\n    this.initEvents();\r\n  };\r\n\r\n  public off = (\r\n    ...args: [MediaEventType, MediaCallback?, MediaEventAction?]\r\n  ): void => {\r\n    const [event, callback, media] = args;\r\n\r\n    if (callback === undefined) {\r\n      this.events[event] = [];\r\n    } else if (media === undefined) {\r\n      this.events[event] = this.events[event].filter(\r\n        (mediaEvent) => !(mediaEvent.callback === callback),\r\n      );\r\n    } else {\r\n      this.events[event] = this.events[event].filter(\r\n        (mediaEvent) =>\r\n          !(mediaEvent.callback === callback && mediaEvent.media === media),\r\n      );\r\n    }\r\n\r\n    this.initEvents();\r\n  };\r\n\r\n  private resize = () => {\r\n    for (const eventType in this.events) {\r\n      const events: MediaEvent[] = this.events[eventType as MediaEventType];\r\n      for (const event of events) {\r\n        const value = event.media();\r\n\r\n        if (event.value !== value) {\r\n          if (eventType === \"changed\") {\r\n            event.callback();\r\n          } else if (eventType === \"in\") {\r\n            if (value === true) {\r\n              event.callback();\r\n            }\r\n          } else if (eventType === \"out\") {\r\n            if (value === false) {\r\n              event.callback();\r\n            }\r\n          }\r\n\r\n          event.value = value;\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  private initEvents = () => {\r\n    for (const eventType in this.events) {\r\n      if (this.events[eventType as MediaEventType].length) {\r\n        window.addEventListener(\"resize\", () => {\r\n          this.resize();\r\n        });\r\n        return;\r\n      }\r\n    }\r\n\r\n    window.removeEventListener(\"resize\", this.resize);\r\n  };\r\n}\r\n\r\nconst media = new JsMediaQuery();\r\n\r\nexport const Media = media;\r\nexport const query = media.query;\r\nexport const min = media.min;\r\nexport const max = media.max;\r\nexport const up = media.up;\r\nexport const down = media.down;\r\nexport const between = media.between;\r\nexport const isTouch = media.isTouch;\r\nexport const isMouse = media.isMouse;\r\nexport const xs = media.xs;\r\nexport const sm = media.sm;\r\nexport const md = media.md;\r\nexport const lg = media.lg;\r\nexport const xl = media.xl;\r\nexport const setBreakpoints = media.setBreakpoints;\r\n\r\nexport default media;\r\n"],"names":["defaultBreakpoints","xs","sm","md","lg","xl","JsMediaQuery","breakpoints","this","in","out","changed","mediaQueryString","window","matchMedia","matches","mediaQuery","_this2","media","breakpoint","query","min","max","from","to","up","event","callback","Function","events","push","value","initEvents","_this","undefined","filter","mediaEvent","eventType","length","addEventListener","resize","removeEventListener","setBreakpoints","Media","down","between","isTouch","isMouse"],"mappings":"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"}