{"version":3,"file":"media.mjs","sources":["../src/Media/Media.ts"],"sourcesContent":["function media(mediaQueryString: string): boolean {\r\n  return window.matchMedia(mediaQueryString).matches;\r\n}\r\n\r\ninterface IBreapoints {\r\n  xs: number;\r\n  sm: number;\r\n  md: number;\r\n  lg: number;\r\n  xl: number;\r\n}\r\n\r\nconst globalBreakpoints: IBreapoints = {\r\n  xs: 0,\r\n  sm: 576,\r\n  md: 768,\r\n  lg: 992,\r\n  xl: 1200,\r\n};\r\n\r\n/**\r\n * Check media query\r\n */\r\nfunction query(mediaQuery: string): boolean {\r\n  return media(mediaQuery);\r\n}\r\n\r\n/**\r\n * Minimum breakpoint width\r\n */\r\nfunction min(breakpoint: number) {\r\n  return media(`(min-width: ${breakpoint}px)`);\r\n}\r\n\r\n/**\r\n * Maximum breakpoint width\r\n */\r\nfunction max(breakpoint: number) {\r\n  return media(`(max-width: ${breakpoint}px)`);\r\n}\r\n\r\n/**\r\n * Minimum breakpoint width\r\n */\r\nfunction up(breakpoint: number): boolean {\r\n  return min(breakpoint);\r\n}\r\n\r\n/**\r\n * Maximum breakpoint width\r\n */\r\nfunction down(breakpoint: number): boolean {\r\n  return max(breakpoint);\r\n}\r\n\r\n/**\r\n * Check if screen between the from and to breakpoints\r\n */\r\nfunction between(from: number, to: number): boolean {\r\n  return media(`(min-width: ${from}px) and (max-width: ${to}px)`);\r\n}\r\n\r\n/**\r\n * Check if is touck device\r\n */\r\nfunction isTouch() {\r\n  return media(`(pointer: coarse)`);\r\n}\r\n\r\n/**\r\n * Check if is non-touch device\r\n */\r\nfunction isMouse() {\r\n  return media(`(pointer: fine)`);\r\n}\r\n\r\n/**\r\n * Check if screen is bigger or equal to xs global defined breapoint\r\n */\r\nfunction xs(breakpoints: IBreapoints = globalBreakpoints) {\r\n  return up(breakpoints.xs);\r\n}\r\n\r\n/**\r\n * Check if screen is bigger or equal to sm global defined breapoint\r\n */\r\nfunction sm(breakpoints: IBreapoints = globalBreakpoints) {\r\n  return up(breakpoints.sm);\r\n}\r\n\r\n/**\r\n * Check if screen is bigger or equal to md global defined breapoint\r\n */\r\nfunction md(breakpoints: IBreapoints = globalBreakpoints) {\r\n  return up(breakpoints.md);\r\n}\r\n\r\n/**\r\n * Check if screen is bigger or equal to lg global defined breapoint\r\n */\r\nfunction lg(breakpoints: IBreapoints = globalBreakpoints) {\r\n  return up(breakpoints.lg);\r\n}\r\n\r\n/**\r\n * Check if screen is bigger or equal to xl global defined breapoint\r\n */\r\nfunction xl(breakpoints: IBreapoints = globalBreakpoints) {\r\n  return up(breakpoints.xl);\r\n}\r\n\r\nfunction setBreakpoints(breakpoints: IBreapoints) {\r\n  this.breakpoints = {\r\n    xs: breakpoints.xs,\r\n    sm: breakpoints.sm,\r\n    md: breakpoints.md,\r\n    lg: breakpoints.lg,\r\n    xl: breakpoints.xl,\r\n  };\r\n}\r\n\r\nexport class Media {\r\n  private breakpoints: IBreapoints = globalBreakpoints;\r\n\r\n  constructor(breakpoints: IBreapoints = globalBreakpoints) {\r\n    this.setBreakpoints(breakpoints);\r\n  }\r\n\r\n  /**\r\n   * Set Local breapoints\r\n   */\r\n  setBreakpoints(breakpoints: IBreapoints) {\r\n    this.breakpoints = {\r\n      xs: breakpoints.xs,\r\n      sm: breakpoints.sm,\r\n      md: breakpoints.md,\r\n      lg: breakpoints.lg,\r\n      xl: breakpoints.xl,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Check media query\r\n   */\r\n  public query = query;\r\n\r\n  /**\r\n   * Minimum breakpoint width\r\n   */\r\n  public min = min;\r\n\r\n  /**\r\n   * Maximum breakpoint width\r\n   */\r\n  public max = max;\r\n\r\n  /**\r\n   * Minimum breakpoint width\r\n   */\r\n  public up = up;\r\n\r\n  /**\r\n   * Maximum breakpoint width\r\n   */\r\n  public down = down;\r\n\r\n  /**\r\n   * Check if screen between the from and to breakpoints\r\n   */\r\n  public between = between;\r\n\r\n  /**\r\n   * Check if is touck device\r\n   */\r\n  public isTouch = isTouch;\r\n\r\n  /**\r\n   * Check if is non-touch device\r\n   */\r\n  public isMouse = isMouse;\r\n\r\n  /**\r\n   * Check if screen is bigger or equal to xs class defined breapoint\r\n   */\r\n  public xs = () => xs(this.breakpoints);\r\n\r\n  /**\r\n   * Check if screen is bigger or equal to sm class defined breapoint\r\n   */\r\n  public sm = () => sm(this.breakpoints);\r\n\r\n  /**\r\n   * Check if screen is bigger or equal to md class defined breapoint\r\n   */\r\n  public md = () => md(this.breakpoints);\r\n\r\n  /**\r\n   * Check if screen is bigger or equal to lg class defined breapoint\r\n   */\r\n  public lg = () => lg(this.breakpoints);\r\n\r\n  /**\r\n   * Check if screen is bigger or equal to xl class defined breapoint\r\n   */\r\n  public xl = () => xl(this.breakpoints);\r\n\r\n  /**\r\n   * Check media query\r\n   */\r\n  public static query = query;\r\n\r\n  /**\r\n   * Minimum breakpoint width\r\n   */\r\n  public static min = min;\r\n\r\n  /**\r\n   * Maximum breakpoint width\r\n   */\r\n  public static max = max;\r\n\r\n  /**\r\n   * Minimum breakpoint width\r\n   */\r\n  public static up = up;\r\n\r\n  /**\r\n   * Maximum breakpoint width\r\n   */\r\n  public static down = down;\r\n\r\n  /**\r\n   * Check if screen between the from and to breakpoints\r\n   */\r\n  public static between = between;\r\n\r\n  /**\r\n   * Check if is touck device\r\n   */\r\n  public static isTouch = isTouch;\r\n\r\n  /**\r\n   * Check if is non-touch device\r\n   */\r\n  public static isMouse = isMouse;\r\n\r\n  /**\r\n   * Check if screen is bigger or equal to xs global defined breapoint\r\n   */\r\n  public static xs = xs;\r\n\r\n  /**\r\n   * Check if screen is bigger or equal to sm global defined breapoint\r\n   */\r\n  public static sm = sm;\r\n\r\n  /**\r\n   * Check if screen is bigger or equal to md global defined breapoint\r\n   */\r\n  public static md = md;\r\n\r\n  /**\r\n   * Check if screen is bigger or equal to lg global defined breapoint\r\n   */\r\n  public static lg = lg;\r\n\r\n  /**\r\n   * Check if screen is bigger or equal to xl global defined breapoint\r\n   */\r\n  public static xl = xl;\r\n\r\n  /**\r\n   * Set Global breapoints\r\n   */\r\n  public static setBreakpoints = setBreakpoints;\r\n}\r\n\r\nexport {\r\n  query,\r\n  min,\r\n  max,\r\n  up,\r\n  down,\r\n  between,\r\n  isTouch,\r\n  isMouse,\r\n  xs,\r\n  sm,\r\n  md,\r\n  lg,\r\n  xl,\r\n  setBreakpoints,\r\n};\r\n\r\nexport default Media;\r\n"],"names":["media","mediaQueryString","window","matchMedia","matches","const","globalBreakpoints","xs","sm","md","lg","xl","query","mediaQuery","min","breakpoint","max","up","down","between","from","to","isTouch","isMouse","breakpoints","setBreakpoints","Media","constructor","this"],"mappings":"AAAA,SAASA,EAAMC,UACNC,OAAOC,WAAWF,GAAkBG,QAW7CC,IAAMC,EAAiC,CACrCC,GAAI,EACJC,GAAI,IACJC,GAAI,IACJC,GAAI,IACJC,GAAI,MAMN,SAASC,EAAMC,UACNb,EAAMa,GAMf,SAASC,EAAIC,UACJf,iBAAqBe,SAM9B,SAASC,EAAID,UACJf,iBAAqBe,SAM9B,SAASE,EAAGF,UACHD,EAAIC,GAMb,SAASG,EAAKH,UACLC,EAAID,GAMb,SAASI,EAAQC,EAAcC,UACtBrB,iBAAqBoB,yBAA2BC,SAMzD,SAASC,WACAtB,uBAMT,SAASuB,WACAvB,qBAMT,SAASO,EAAGiB,yBAA2BlB,GAC9BW,EAAGO,EAAYjB,IAMxB,SAASC,EAAGgB,yBAA2BlB,GAC9BW,EAAGO,EAAYhB,IAMxB,SAASC,EAAGe,yBAA2BlB,GAC9BW,EAAGO,EAAYf,IAMxB,SAASC,EAAGc,yBAA2BlB,GAC9BW,EAAGO,EAAYd,IAMxB,SAASC,EAAGa,yBAA2BlB,GAC9BW,EAAGO,EAAYb,IAGxB,SAASc,EAAeD,QACjBA,YAAc,CACjBjB,GAAIiB,EAAYjB,GAChBC,GAAIgB,EAAYhB,GAChBC,GAAIe,EAAYf,GAChBC,GAAIc,EAAYd,GAChBC,GAAIa,EAAYb,QAIPe,EAGXC,SAAYH,6BAA2BlB,oBAFJA,aAsBpBM,WAKFE,WAKAE,UAKDC,YAKEC,eAKGC,eAKAG,eAKAC,4BAKChB,EAAGqB,EAAKJ,wCAKRhB,EAAGoB,EAAKJ,wCAKRf,EAAGmB,EAAKJ,wCAKRd,EAAGkB,EAAKJ,wCAKRb,EAAGiB,EAAKJ,mBA/EnBC,eAAeD,IAMtBC,YAAAA,wBAAeD,QACRA,YAAc,CACjBjB,GAAIiB,EAAYjB,GAChBC,GAAIgB,EAAYhB,GAChBC,GAAIe,EAAYf,GAChBC,GAAIc,EAAYd,GAChBC,GAAIa,EAAYb,KAwENe,QAAQd,EAKRc,MAAMZ,EAKNY,MAAMV,EAKNU,KAAKT,EAKLS,OAAOR,EAKPQ,UAAUP,EAKVO,UAAUJ,EAKVI,UAAUH,EAKVG,KAAKnB,EAKLmB,KAAKlB,EAKLkB,KAAKjB,EAKLiB,KAAKhB,EAKLgB,KAAKf,EAKLe,iBAAiBD"}